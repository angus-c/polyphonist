"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var util = require("../util");
var AudioNode = require("./AudioNode");

var AudioWorkerNode = function (_AudioNode) {
  _inherits(AudioWorkerNode, _AudioNode);

  /**
   * @param {AudioContext} context
   * @param {object}       opts
   * @param {number}       opts.numberOfInputs
   * @param {number}       opts.numberOfOutputs
   */

  function AudioWorkerNode(context, opts) {
    _classCallCheck(this, AudioWorkerNode);

    opts = opts || /* istanbul ignore next */{};

    var worker = opts.worker;
    var numberOfInputs = util.defaults(opts.numberOfInputs, 0);
    var numberOfOutputs = util.defaults(opts.numberOfOutputs, 0);

    var inputs = util.toArrayIfNeeded(numberOfInputs).map(util.toValidNumberOfChannels);
    var outputs = util.toArrayIfNeeded(numberOfOutputs).map(util.toValidNumberOfChannels);

    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(AudioWorkerNode).call(this, context, {
      inputs: inputs,
      outputs: outputs,
      channelCount: 0,
      channelCountMode: "explicit"
    }));

    _this._maxChannelCount = inputs.reduce(function (maxValue, numberOfChannels) {
      return Math.max(maxValue, numberOfChannels);
    }, 0);
    _this._worker = worker;
    _this.inputs.forEach(function (input, index) {
      input.setChannelCount(inputs[index]);
    });
    _this.enableOutputsIfNecessary();
    return _this;
  }

  /**
   * @return {number}
   */


  _createClass(AudioWorkerNode, [{
    key: "getChannelCount",
    value: function getChannelCount() {
      return this._maxChannelCount;
    }
  }, {
    key: "setChannelCount",
    value: function setChannelCount() {}
    // This node's channelCount cannot be changed.


    /**
     * @return {string}
     */

  }, {
    key: "getChannelCountMode",
    value: function getChannelCountMode() {
      return "explicit";
    }
  }, {
    key: "setChannelCountMode",
    value: function setChannelCountMode() {}
    // This node's channelCountMode cannot be changed.


    /**
     * @return {string}
     */

  }, {
    key: "getChannelInterpretation",
    value: function getChannelInterpretation() {
      return this.inputs[0].getChannelInterpretation();
    }

    /**
     * @param {string} value
     */

  }, {
    key: "setChannelInterpretation",
    value: function setChannelInterpretation(value) {
      this.inputs.forEach(function (input) {
        input.setChannelInterpretation(value);
      });
    }

    /**
     * @param {*} message
     */
    /* istanbul ignore next */

  }, {
    key: "postMessage",
    value: function postMessage() {
      throw new TypeError("NOT YET IMPLEMENTED");
    }

    /**
     * @return {AudioWorker}
     */

  }, {
    key: "getWorker",
    value: function getWorker() {
      return this._worker;
    }

    /**
     * @return {number}
     */

  }, {
    key: "getTailTime",
    value: function getTailTime() {
      return Infinity;
    }
  }]);

  return AudioWorkerNode;
}(AudioNode);

module.exports = AudioWorkerNode;