"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var util = require("../util");
var AudioNode = require("./AudioNode");

var PanningModelTypes = ["equalpower", "HRTF"];
var DistanceModelTypes = ["linear", "inverse", "exponential"];

var BasePannerNode = function (_AudioNode) {
  _inherits(BasePannerNode, _AudioNode);

  /**
   * @param {AudioContext} context
   */

  function BasePannerNode(context) {
    _classCallCheck(this, BasePannerNode);

    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(BasePannerNode).call(this, context, {
      inputs: [1],
      outputs: [2],
      channelCount: 2,
      channelCountMode: "clamped-max"
    }));

    _this._panningModel = "equalpower";
    _this._distanceModel = "inverse";
    _this._refDistance = 1;
    _this._maxDistance = 10000;
    _this._rolloffFactor = 1;
    _this._coneInnerAngle = 360;
    _this._coneOuterAngle = 360;
    _this._coneOuterGain = 0;
    return _this;
  }

  /**
   * @param {number} value
   */


  _createClass(BasePannerNode, [{
    key: "setChannelCount",
    value: function setChannelCount(value) {
      value = util.clamp(value | 0, 1, 2);
      _get(Object.getPrototypeOf(BasePannerNode.prototype), "setChannelCount", this).call(this, value);
    }

    /**
     * @param {number} value
     */

  }, {
    key: "setChannelCountMode",
    value: function setChannelCountMode(value) {
      /* istanbul ignore else */
      if (value === "clamped-max" || value === "explicit") {
        _get(Object.getPrototypeOf(BasePannerNode.prototype), "setChannelCountMode", this).call(this, value);
      }
    }

    /**
     * @return {string}
     */

  }, {
    key: "getPanningModel",
    value: function getPanningModel() {
      return this._panningModel;
    }

    /**
     * @param {string} value
     */

  }, {
    key: "setPanningModel",
    value: function setPanningModel(value) {
      /* istanbul ignore else */
      if (PanningModelTypes.indexOf(value) !== -1) {
        this._panningModel = value;
      }
    }

    /**
     * @return {string}
     */

  }, {
    key: "getDistanceModel",
    value: function getDistanceModel() {
      return this._distanceModel;
    }

    /**
     * @param {string} value
     */

  }, {
    key: "setDistanceModel",
    value: function setDistanceModel(value) {
      /* istanbul ignore else */
      if (DistanceModelTypes.indexOf(value) !== -1) {
        this._distanceModel = value;
      }
    }

    /**
     * @return {number}
     */

  }, {
    key: "getRefDistance",
    value: function getRefDistance() {
      return this._refDistance;
    }

    /**
     * @param {number} value
     */

  }, {
    key: "setRefDistance",
    value: function setRefDistance(value) {
      this._refDistance = util.toNumber(value);
    }

    /**
     * @return {number}
     */

  }, {
    key: "getMaxDistance",
    value: function getMaxDistance() {
      return this._maxDistance;
    }

    /**
     * @param {number} value
     */

  }, {
    key: "setMaxDistance",
    value: function setMaxDistance(value) {
      this._maxDistance = util.toNumber(value);
    }

    /**
     * @return {number}
     */

  }, {
    key: "getRolloffFactor",
    value: function getRolloffFactor() {
      return this._rolloffFactor;
    }

    /**
     * @param {number} value
     */

  }, {
    key: "setRolloffFactor",
    value: function setRolloffFactor(value) {
      this._rolloffFactor = util.toNumber(value);
    }

    /**
     * @return {number}
     */

  }, {
    key: "getConeInnerAngle",
    value: function getConeInnerAngle() {
      return this._coneInnerAngle;
    }

    /**
     * @param {number} value
     */

  }, {
    key: "setConeInnerAngle",
    value: function setConeInnerAngle(value) {
      this._coneInnerAngle = util.toNumber(value);
    }

    /**
     * @return {number}
     */

  }, {
    key: "getConeOuterAngle",
    value: function getConeOuterAngle() {
      return this._coneOuterAngle;
    }

    /**
     * @param {number} value
     */

  }, {
    key: "setConeOuterAngle",
    value: function setConeOuterAngle(value) {
      this._coneOuterAngle = util.toNumber(value);
    }

    /**
     * @return {number}
     */

  }, {
    key: "getConeOuterGain",
    value: function getConeOuterGain() {
      return this._coneOuterGain;
    }

    /**
     * @param {number} value
     */

  }, {
    key: "setConeOuterGain",
    value: function setConeOuterGain(value) {
      this._coneOuterGain = util.toNumber(value);
    }
  }]);

  return BasePannerNode;
}(AudioNode);

module.exports = BasePannerNode;