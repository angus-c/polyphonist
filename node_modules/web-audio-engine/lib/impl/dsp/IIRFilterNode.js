"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var IIRFilterNodeDSP = {
  dspInit: function dspInit() {
    this._kernels = [];
  },
  dspUpdateKernel: function dspUpdateKernel(numberOfChannels) {
    if (numberOfChannels < this._kernels.length) {
      this._kernels.splice(numberOfChannels);
    } else if (this._kernels.length < numberOfChannels) {
      while (numberOfChannels !== this._kernels.length) {
        this._kernels.push(new IIRFilterKernel(this._feedforward, this._feedback));
      }
    }

    switch (numberOfChannels) {
      case 1:
        this.dspProcess = this.dspProcess1;
        break;
      case 2:
        this.dspProcess = this.dspProcess2;
        break;
      default:
        this.dspProcess = this.dspProcessN;
        break;
    }
  },
  dspProcess1: function dspProcess1() {
    var inputs = this.inputs[0].bus.getChannelData();
    var outputs = this.outputs[0].bus.getMutableData();
    var kernels = this._kernels;

    kernels[0].process(inputs[0], outputs[0], this.blockSize);
  },
  dspProcess2: function dspProcess2() {
    var blockSize = this.blockSize;
    var inputs = this.inputs[0].bus.getChannelData();
    var outputs = this.outputs[0].bus.getMutableData();
    var kernels = this._kernels;

    kernels[0].process(inputs[0], outputs[0], blockSize);
    kernels[1].process(inputs[1], outputs[1], blockSize);
  },
  dspProcessN: function dspProcessN() {
    var blockSize = this.blockSize;
    var inputs = this.inputs[0].bus.getChannelData();
    var outputs = this.outputs[0].bus.getMutableData();
    var kernels = this._kernels;

    for (var i = 0, imax = kernels.length; i < imax; i++) {
      kernels[i].process(inputs[i], outputs[i], blockSize);
    }
  }
};

var IIRFilterKernel = function () {
  function IIRFilterKernel(feedforward, feedback) {
    _classCallCheck(this, IIRFilterKernel);

    this.a = toCoefficient(feedback, feedback[0]);
    this.b = toCoefficient(feedforward, feedback[0]);
    this.x = new Float32Array(this.b.length);
    this.y = new Float32Array(this.a.length);
  }

  _createClass(IIRFilterKernel, [{
    key: "process",
    value: function process(input, output, inNumSamples) {
      var a = this.a;
      var b = this.b;
      var x = this.x;
      var y = this.y;
      var alen = this.a.length - 1;
      var blen = this.b.length;

      for (var i = 0; i < inNumSamples; i++) {
        x[blen - 1] = input[i];
        y[alen] = 0;

        for (var j = 0; j < blen; j++) {
          y[alen] += b[j] * x[j];
          x[j] = flushDenormalFloatToZero(x[j + 1]);
        }

        for (var _j = 0; _j < alen; _j++) {
          y[alen] -= a[_j] * y[_j];
          y[_j] = flushDenormalFloatToZero(y[_j + 1]);
        }

        output[i] = y[alen];
      }
    }
  }]);

  return IIRFilterKernel;
}();

function toCoefficient(filter, a0) {
  var coeff = new Float32Array(filter.length);

  for (var i = 0, imax = coeff.length; i < imax; i++) {
    coeff[i] = filter[imax - i - 1] / a0;
  }

  return coeff;
}

function flushDenormalFloatToZero(f) {
  return Math.abs(f) < 1.175494e-38 ? 0.0 : f;
}

module.exports = IIRFilterNodeDSP;