"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var util = require("../util");
var AudioNode = require("./AudioNode");

/**
 * @prop {AudioNodeOutput} output
 * @prop {AudioBus}        outputBus
 */

var AudioDestinationNode = function (_AudioNode) {
  _inherits(AudioDestinationNode, _AudioNode);

  /**
   * @param {AudioContext} context
   * @param {object}       opts
   * @param {number}       opts.numberOfChannels
   */

  function AudioDestinationNode(context, opts) {
    _classCallCheck(this, AudioDestinationNode);

    opts = opts || /* istanbul ignore next */{};

    var numberOfChannels = opts.numberOfChannels;

    numberOfChannels = util.toValidNumberOfChannels(numberOfChannels);

    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(AudioDestinationNode).call(this, context, {
      inputs: [numberOfChannels],
      outputs: [],
      channelCount: numberOfChannels,
      channelCountMode: "explicit"
    }));

    _this._numberOfChannels = numberOfChannels | 0;
    _this._destinationChannelData = _this.inputs[0].bus.getChannelData();
    return _this;
  }

  /**
   * @return {number}
   */


  _createClass(AudioDestinationNode, [{
    key: "getMaxChannelCount",
    value: function getMaxChannelCount() {
      return this._numberOfChannels;
    }

    /**
     * @param {number} value
     */

  }, {
    key: "setChannelCount",
    value: function setChannelCount(value) {
      value = util.clamp(value | 0, 1, this.getMaxChannelCount());
      _get(Object.getPrototypeOf(AudioDestinationNode.prototype), "setChannelCount", this).call(this, value);
    }

    /**
     * @param {Float32Array[]} channelData
     * @param {number}         offset
     */

  }, {
    key: "process",
    value: function process(channelData, offset) {
      var inputs = this.inputs;
      var destinationChannelData = this._destinationChannelData;
      var numberOfChannels = channelData.length;

      for (var i = 0, imax = inputs.length; i < imax; i++) {
        inputs[i].pull();
      }

      for (var ch = 0; ch < numberOfChannels; ch++) {
        channelData[ch].set(destinationChannelData[ch], offset);
      }
    }
  }]);

  return AudioDestinationNode;
}(AudioNode);

module.exports = AudioDestinationNode;